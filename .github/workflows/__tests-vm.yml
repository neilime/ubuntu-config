name: Shared - Tests - VM

on:
  workflow_call:
    inputs:
      test-image:
        description: "Test CI Docker image to use"
        required: true
        type: string

permissions: {}

jobs:
  tests-vm:
    name: Tests - VM
    runs-on: ubuntu-latest
    permissions:
      contents: read
    env:
      BITWARDEN_CLIENT_ID: ${{ secrets.BITWARDEN_CLIENT_ID }}
      BITWARDEN_CLIENT_SECRET: ${{ secrets.BITWARDEN_CLIENT_SECRET }}
      BITWARDEN_PASSWORD: ${{ secrets.BITWARDEN_PASSWORD }}
      INSTALL_SCRIPT: https://raw.githubusercontent.com/neilime/ubuntu-config/${{ github.head_ref || github.ref_name }}/install.sh
      REPOSITORY_URL: ${{ github.event.repository.clone_url }}
      REPOSITORY_BRANCH: ${{ github.head_ref || github.ref_name }}
      TEST_IMAGE: ${{ inputs.test-image }}
    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Set up Lima
        uses: lima-vm/lima-actions/setup@03b96d61959e83b2c737e44162c3088e81de0886 # v1.0.1
        id: lima-actions-setup

      - name: Cache Lima
        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 # v4.2.4
        with:
          path: ~/.cache/lima
          key: lima-${{ steps.lima-actions-setup.outputs.version }}

      - name: Start Lima Ubuntu Desktop VM
        run: |
          limactl start --name=ubuntu-desktop vm/lima-ubuntu-desktop.yml

      - name: Set up SSH for Lima
        uses: lima-vm/lima-actions/ssh@03b96d61959e83b2c737e44162c3088e81de0886 # v1.0.1
        with:
          name: ubuntu-desktop

      - name: Wait for VM to be ready
        run: |
          echo "‚è≥ Waiting for VM to be ready..."

          # Wait for SSH to be accessible
          for i in {1..120}; do
            if ssh lima-ubuntu-desktop echo "‚úÖ SSH ready" 2>/dev/null; then
              echo "‚úÖ VM is ready and SSH is up"
              break
            fi
            echo "Attempt $i/120: Waiting for VM..."
            sleep 10
          done

      - name: Run install script
        run: |
          # Create and upload a script to properly set environment variables and run the install script
          cat > /tmp/run_install.sh << 'EOF'
          #!/bin/bash
          set -eu

          # Export environment variables
          export BITWARDEN_CLIENT_ID="$1"
          export BITWARDEN_CLIENT_SECRET="$2"
          export BITWARDEN_PASSWORD="$3"
          export REPOSITORY_URL="$4"
          export REPOSITORY_BRANCH="$5"

          # Set up GUI environment for dconf operations (for the user, not root)
          export DISPLAY=:99
          export XDG_CURRENT_DESKTOP=ubuntu:GNOME
          export DESKTOP_SESSION=ubuntu
          export XDG_SESSION_TYPE=x11

          # Debug: Check if required commands are available
          echo "üîç Checking for required GUI commands..."
          which Xvfb || { echo "‚ùå Xvfb not found"; whereis Xvfb; ls -la /usr/bin/*vfb* || true; }
          which dbus-launch || { echo "‚ùå dbus-launch not found"; whereis dbus-launch; ls -la /usr/bin/dbus* || true; }

          # Start system-wide dbus if not running
          sudo systemctl start dbus || true

          # Start virtual display as the user (since dconf tasks will run as user)
          # Use full path and provide fallbacks in case of PATH issues
          if command -v Xvfb >/dev/null 2>&1; then
            Xvfb :99 -screen 0 1024x768x24 -ac +extension GLX +render -noreset &
            XVFB_PID=$!
          elif [ -x /usr/bin/Xvfb ]; then
            /usr/bin/Xvfb :99 -screen 0 1024x768x24 -ac +extension GLX +render -noreset &
            XVFB_PID=$!
          else
            echo "‚ùå Xvfb not found, attempting to install..."
            sudo apt-get update && sudo apt-get install -y xvfb
            /usr/bin/Xvfb :99 -screen 0 1024x768x24 -ac +extension GLX +render -noreset &
            XVFB_PID=$!
          fi
          sleep 3

          # Start dbus session as the user (dconf needs user session)
          # Use full path and provide fallbacks in case of PATH issues
          if command -v dbus-launch >/dev/null 2>&1; then
            eval $(dbus-launch --sh-syntax)
          elif [ -x /usr/bin/dbus-launch ]; then
            eval $(/usr/bin/dbus-launch --sh-syntax)
          else
            echo "‚ùå dbus-launch not found, attempting to install..."
            sudo apt-get update && sudo apt-get install -y dbus-x11
            eval $(/usr/bin/dbus-launch --sh-syntax)
          fi
          export DBUS_SESSION_BUS_ADDRESS

          # Ensure machine-id exists for dbus
          sudo dbus-uuidgen --ensure=/etc/machine-id

          # Download and run the install script (which will sudo ansible-pull)
          # The GUI environment variables will be inherited by the user tasks
          wget -qO- "$6" | sh

          # Clean up background processes
          if [ -n "${XVFB_PID:-}" ]; then
            kill $XVFB_PID || true
          fi

          # Create success marker
          sudo touch /e2e.success
          EOF

          # Make the script executable
          chmod +x /tmp/run_install.sh

          # Copy the script to the VM
          scp /tmp/run_install.sh lima-ubuntu-desktop:/tmp/run_install.sh

          # Execute the script on the VM with proper argument passing
          # shellcheck disable=SC2029
          ssh lima-ubuntu-desktop "bash /tmp/run_install.sh \
            '$BITWARDEN_CLIENT_ID' \
            '$BITWARDEN_CLIENT_SECRET' \
            '$BITWARDEN_PASSWORD' \
            '$REPOSITORY_URL' \
            '$REPOSITORY_BRANCH' \
            '$INSTALL_SCRIPT'"

      - name: Validate setup success
        run: |
          ssh lima-ubuntu-desktop '[ -f /e2e.success ] && echo "‚úÖ Success" || { echo "‚ùå Setup failed"; exit 1; }'

      - name: Run TestInfra tests on VM using test image
        run: |
          docker run --rm --network host -v "$PWD":/workspace -w /workspace \
            "$TEST_IMAGE" \
            python3 tests/run_tests.py --verbose --host="ssh://ubuntu@127.0.0.1:2222" --user="ubuntu"
