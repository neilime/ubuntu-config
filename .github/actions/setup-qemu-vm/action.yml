name: "Setup QEMU VM"
description: "Composite action to set up a QEMU virtual machine"

inputs:
  iso-url:
    description: "URL to the Ubuntu Desktop ISO"
    required: true

  user:
    description: "Username created VM user"
    required: true
    default: "ubuntu"

  password:
    description: "Password for created user"
    required: true
    default: "ubuntu-pass"

outputs:
  ssh-command:
    description: "SSH command to connect to the VM"
    value: ${{ steps.check-ssh.outputs.ssh-command }}

runs:
  using: "composite"
  steps:
    - name: Install dependencies
      shell: bash
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo apt-get -q update
        sudo apt-get -yq install qemu-system-x86 genisoimage wget nbdkit qemu-utils

    - name: Enable KVM group perms
      shell: bash
      run: |
        echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
        sudo udevadm control --reload-rules
        sudo udevadm trigger --name-match=kvm

    - name: Generate SSH key pair
      shell: bash
      run: |
        ssh-keygen -t rsa -b 2048 -f ~/.ssh/id_rsa -N ""
        echo "SSH public key:"
        cat ~/.ssh/id_rsa.pub

    - name: Prepare cloud-init ISO
      shell: bash
      run: |
        mkdir -p cloud-init-gen

        USERNAME="${{ inputs.user }}"
        HASHED_PASS=$(openssl passwd -6 "${{ inputs.password }}")
        SSH_KEY=$(cat ~/.ssh/id_rsa.pub)

        sed \
          -e "s|{{USERNAME}}|$USERNAME|" \
          -e "s|{{HASHED_PASSWORD}}|$HASHED_PASS|" \
          -e "s|{{SSH_PUBLIC_KEY}}|$SSH_KEY|" \
          cloud-init/user-data.yml > cloud-init-gen/user-data.yml

        cp cloud-init/meta-data.yml cloud-init-gen/meta-data.yml
        genisoimage -output seed.iso -volid cidata -joliet -rock cloud-init-gen/user-data.yml cloud-init-gen/meta-data.yml

        # FIXME: This is debuging
        cat cloud-init-gen/user-data.yml
        cat cloud-init-gen/meta-data.yml

    - name: ♻️ Ubuntu Desktop ISO cache
      id: cache-ubuntu-iso
      uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
      with:
        path: ubuntu-desktop.iso
        key: ${{ runner.os }}-cache-ubuntu-iso-${{ inputs.iso-url }}

    - name: Download Ubuntu Desktop ISO
      if: steps.cache-ubuntu-iso.outputs.cache-hit != 'true'
      shell: bash
      run: wget -q "${{ inputs.iso-url }}" -O "ubuntu-desktop.iso"

    - name: Create virtual disk
      shell: bash
      run: qemu-img create -f qcow2 ubuntu-disk.qcow2 25G

    - name: Boot Ubuntu Desktop in QEMU with KVM
      shell: bash
      run: |
        qemu-system-x86_64 \
          -enable-kvm \
          -m 4096 \
          -smp 2 \
          -cpu host \
          -cdrom ubuntu-desktop.iso \
          -drive file=ubuntu-disk.qcow2,format=qcow2 \
          -drive file=seed.iso,format=raw \
          -netdev user,id=net0,hostfwd=tcp::2222-:22 \
          -device e1000,netdev=net0 \
          -display none \
          -daemonize

    - name: ⏳ Waiting for SSH to become available...
      id: check-ssh
      shell: bash
      run: |
        echo "⏳ Waiting for SSH to become available..."

        for i in {1..60}; do
          if ssh -p 2222 -o StrictHostKeyChecking=no -o ConnectTimeout=5 ${{ inputs.user }}@127.0.0.1 "echo '✅ SSH ready'" 2>/dev/null; then
            echo "✅ VM is up and SSH is working!"
            break
          fi
          echo "⏱️  [$i] SSH not ready yet, waiting..."
          sleep 5
        done

        # Final check
        if ! ssh -p 2222 -o StrictHostKeyChecking=no -o ConnectTimeout=5 ${{ inputs.user }}@127.0.0.1 "true" 2>/dev/null; then
          echo "::error ::❌ SSH never became ready after 5 minutes"
          exit 1
        fi

        echo "ssh-command=ssh -p 2222 -o StrictHostKeyChecking=no -o ConnectTimeout=5 ${{ inputs.user }}@127.0.0.1" >> "$GITHUB_OUTPUT"
