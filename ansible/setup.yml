---
- name: Setup personal computer
  hosts: personal_computer
  become: true
  vars:
    ansible_config_dir: "/home/ansible/config"

  tasks:
    # Environment compatibility checks
    - name: Check if user namespaces are available for Flatpak
      ansible.builtin.command: >-
        unshare --user --pid --mount-proc echo "Namespaces available"
      register: namespace_check
      failed_when: false
      changed_when: false
      check_mode: false

    - name: Check if D-Bus session is available
      ansible.builtin.command: >-
        dbus-launch --exit-with-session echo "D-Bus available"
      register: dbus_check
      failed_when: false
      changed_when: false
      check_mode: false

    - name: Set environment compatibility facts
      ansible.builtin.set_fact:
        flatpak_available: "{{ namespace_check.rc == 0 }}"
        dbus_available: "{{ dbus_check.rc == 0 }}"
        gui_available: >-
          {{ ansible_env.DISPLAY is defined or
             ansible_env.WAYLAND_DISPLAY is defined }}

    - name: Display environment compatibility status
      ansible.builtin.debug:
        msg:
          - >-
            Flatpak support: {{ 'Available' if flatpak_available
            else 'Limited (will skip Flatpak installations)' }}
          - >-
            D-Bus support: {{ 'Available' if dbus_available
            else 'Limited (will skip dconf operations)' }}
          - >-
            GUI support: {{ 'Available' if gui_available
            else 'Limited (headless environment)' }}

    - name: Setup system
      ansible.builtin.import_role:
        name: setup_system
      vars:
        setup_system_apt: "{{ system.apt }}"
        setup_system_locale: "{{ system.locale }}"
        setup_system_timezone: "{{ system.timezone }}"
        setup_system_favorites: "{{ system.favorites }}"
      tags: [system]

    # DESKTOP LAYER - Domain-based GUI applications and desktop environment
    - name: Setup browser
      ansible.builtin.import_role:
        name: setup_browser
      vars:
        setup_browser_flatpak: "{{ browser.flatpak }}"
        setup_browser_favorites: "{{ browser.favorites }}"
      tags: [browser, desktop]

    - name: Setup communication
      ansible.builtin.import_role:
        name: setup_communication
      vars:
        setup_communication_flatpak: "{{ communication.flatpak }}"
        setup_communication_favorites: "{{ communication.favorites }}"
      tags: [communication, desktop]

    - name: Setup development
      ansible.builtin.import_role:
        name: setup_development
      vars:
        setup_development_repositories: "{{ development.repositories }}"
        setup_development_apt: "{{ development.apt }}"
        setup_development_flatpak: "{{ development.flatpak }}"
        setup_development_projects_directory: >-
          {{ development.projects_directory }}
        setup_development_favorites: "{{ development.favorites }}"
      tags: [development, desktop]

    - name: Setup media
      ansible.builtin.import_role:
        name: setup_media
      vars:
        setup_media_flatpak: "{{ media.flatpak }}"
        setup_media_favorites: "{{ media.favorites }}"
      tags: [media, desktop]

    - name: Setup utility
      ansible.builtin.import_role:
        name: setup_utility
      vars:
        setup_utility_repositories: "{{ utility.repositories }}"
        setup_utility_apt: "{{ utility.apt }}"
        setup_utility_flatpak: "{{ utility.flatpak }}"
        setup_utility_favorites: "{{ utility.favorites }}"
      tags: [utility, desktop]

    - name: Setup Home Manager for user configurations
      ansible.builtin.import_role:
        name: setup_home_manager
      vars:
        setup_home_manager_git: "{{ development.git }}"
        setup_home_manager_shell: "{{ development.shell }}"
        setup_home_manager_nix_packages: "{{ development.nix_packages }}"
        setup_home_manager_environment: "{{ development.environment }}"
      tags: [home-manager, user]
      become: false

    # USER LAYER - User-specific configurations
    - name: Setup keys
      ansible.builtin.import_role:
        name: setup_keys
      tags: [keys, user]
      vars:
        setup_keys_bitwarden_server: "{{ bitwarden.server }}"
        setup_keys_bitwarden_email: "{{ bitwarden.email }}"
        setup_keys_bitwarden_password: "{{ bitwarden.password }}"
        setup_keys_bitwarden_client_id: "{{ bitwarden.client_id }}"
        setup_keys_bitwarden_client_secret: "{{ bitwarden.client_secret }}"
        setup_keys_bitwarden_ssh_keys_collection_id: >-
          {{ bitwarden.sshKeysCollectionId }}
        setup_keys_bitwarden_gpg_keys_collection_id: >-
          {{ bitwarden.gpgKeysCollectionId }}
