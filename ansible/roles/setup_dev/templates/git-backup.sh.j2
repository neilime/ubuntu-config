#!/bin/bash

PROJECTS_DIR="{{ setup_dev_projects_directory }}"
DEST_DIR="$1"

if [ -z "$DEST_DIR" ]; then
	echo "Usage: $0 <destination-directory>"
	exit 1
fi

# Create the backup directory if it doesn't exist
mkdir -p "$DEST_DIR"

# Function to check for a Git repository in a directory
is_git_repo() {
	local dir=$1

	if [ ! -d "$dir/.git" ]; then
		return 1
	fi

	# Check if the directory is a Git repository
	cd "$dir" || return 1
	if git rev-parse --git-dir >/dev/null 2>&1; then
		return 0
	fi

	return 1
}

# Function to recursively search for Git repositories
find_git_repos() {
	local current_dir=$1
	if is_git_repo "$current_dir"; then

		# Strip $PROJECTS_DIR from $current_dir to get the relative path
		backup_dir="$DEST_DIR/${current_dir#"$PROJECTS_DIR"/}"
		backup_project "$current_dir" "$backup_dir"
		return # Stop further searching in this branch if a Git repo is found
	fi

	# Loop through subdirectories
	for subdir in "$current_dir"/*; do
		if [[ -d "$subdir" ]]; then # Check if it is a directory
			find_git_repos "$subdir"
		fi
	done
}

# Function to backup project
backup_project() {
	local project_dir="$1"
	local backup_dir="$2"

	echo "Backing up $project_dir to $backup_dir"

	# Create the backup directory for the project
	mkdir -p "$backup_dir"

	# Copy project files excluding .git directories but including .git/config as .git/config.bak
	rsync -a --filter=":- $project_dir/.gitignore" --exclude='.git' --include='.git/config' --include='.git/config.bak' "$project_dir/" "$backup_dir"

	# Backup .git/config as .git/config.bak
	if [ -f "$project_dir/.git/config" ]; then
		mkdir -p "$backup_dir/.git"
		cp "$project_dir/.git/config" "$backup_dir/.git/config.bak"
	fi

	# Backup the current branch name
	if [ -d "$project_dir/.git" ]; then
		current_branch=$(git -C "$project_dir" rev-parse --abbrev-ref HEAD)
		echo "$current_branch" >"$backup_dir/.git/branch.bak"
	fi

}

# Find all git directories and check them
find_git_repos "$PROJECTS_DIR"
