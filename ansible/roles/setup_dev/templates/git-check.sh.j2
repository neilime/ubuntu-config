#!/bin/bash

# Directory containing your git projects
PROJECTS_DIR="{{ setup_dev_projects_directory }}"

# shellcheck disable=all
{% raw %}
# shellcheck enable=all

# Initialize notification message
NOTIFICATION_MESSAGE_MAX_LENGTH=220
ISSUED_REPOSITORIES=0
LOG_MESSAGE=""
NOTIFICATION_MESSAGE=""

# Function to check for a Git repository in a directory
check_git_repo() {
	local dir=$1

	if [ ! -d "$dir/.git" ]; then
		return 1
	fi

	# Check if the directory is a Git repository
	cd "$dir" || return 1
	if git rev-parse --git-dir >/dev/null 2>&1; then
		return 0
	fi

	return 1
}

# Function to recursively search for Git repositories
find_git_repos() {
	local current_dir=$1
	if check_git_repo "$current_dir"; then
		check_git "$current_dir"
		return # Stop further searching in this branch if a Git repo is found
	fi

	# Loop through subdirectories
	for subdir in "$current_dir"/*; do
		if [[ -d "$subdir" ]]; then # Check if it is a directory
			find_git_repos "$subdir"
		fi
	done
}

# Function to check git status
check_git() {
	local repo_path=$1
	cd "$repo_path" || return

	local repo_name=$(basename "$repo_path")
	local uncommitted_changes=false
	local unpushed_changes=false

	# Check if there are uncommitted changes
	if ! git diff-index --quiet HEAD -- >/dev/null 2>&1; then
		uncommitted_changes=true
	fi

	# Check if there are unpushed commits
	local git_current_branch=$(git name-rev --name-only HEAD)
	if output=$(git log origin/$git_current_branch..HEAD 2>&1); then
		if [[ -n "$output" ]]; then
			unpushed_changes=true
		fi
	fi

	# Return early if no changes found
	if [ "$uncommitted_changes" = false ] && [ "$unpushed_changes" = false ]; then
		return
	fi

	# Add to notification message
	ISSUED_REPOSITORIES=$((ISSUED_REPOSITORIES + 1))

	local repo_notification_message=""
	if [ "$uncommitted_changes" = true ]; then
		repo_notification_message+="uncommitted changes"
	fi

	if [ "$unpushed_changes" = true ]; then
		if [ "$repo_notification_message" != "" ]; then
			repo_notification_message+=" and "
		fi
		repo_notification_message+="unpushed commits"
	fi

	LOG_MESSAGE+=" - $repo_path: $repo_notification_message\n"
	NOTIFICATION_MESSAGE+=" - $repo_name: $repo_notification_message\n"

}

# Find all git directories and check them
find_git_repos "$PROJECTS_DIR"

echo -e "$LOG_MESSAGE"

# Send a single notification if there are any changes
if [ ! -z "$NOTIFICATION_MESSAGE" ]; then

	# Truncate message to 120 characters
	if [ ${#NOTIFICATION_MESSAGE} -gt $NOTIFICATION_MESSAGE_MAX_LENGTH ]; then
		CUT_LENGTH=$((NOTIFICATION_MESSAGE_MAX_LENGTH - 3))
		NOTIFICATION_MESSAGE=$(echo "$NOTIFICATION_MESSAGE" | cut -c -$CUT_LENGTH)
		NOTIFICATION_MESSAGE+="..."
	fi

	notify-send \
		-u normal \
		-t 5000 \
		-i /usr/share/icons/Adwaita/scalable/status/weather-severe-alert-symbolic.svg \
		"Git Repositories Status ($ISSUED_REPOSITORIES)" "$NOTIFICATION_MESSAGE"
fi

# shellcheck disable=all
{% endraw %}
# shellcheck enable=all
