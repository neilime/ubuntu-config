---
# ---
# Setup Home Manager for user-layer configuration management (standalone install)

# We expect `nix` to be installed already (nix-daemon). This role configures a
# per-user home-manager flake and installs/activates Home Manager following the
# official standalone instructions: https://nix-community.github.io/home-manager/index.xhtml#sec-install-standalone

- name: Check if Nix is properly installed
  ansible.builtin.stat:
    path: /nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh
  register: setup_home_manager_nix_daemon_profile
  failed_when: false

- name: Verify Nix installation is complete
  ansible.builtin.fail:
    msg: |
      Nix is not properly installed. The file /nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh is missing.
      This suggests that the 'danielrolls.nix' role failed earlier in the installation process.
      Please check the logs for the 'Install Nix package manager' task in the setup_system role.
  when: not setup_home_manager_nix_daemon_profile.stat.exists

- name: Set user home directory
  ansible.builtin.set_fact:
    setup_home_manager_user_home: "/home/{{ ansible_user }}"

- name: Ensure home-manager config directory exists
  ansible.builtin.file:
    path: "{{ setup_home_manager_user_home }}/.config/home-manager"
    state: directory
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: "0755"
  become: false

- name: Deploy Home Manager core configuration (home.nix)
  ansible.builtin.template:
    src: home.nix.j2
    dest: "{{ setup_home_manager_user_home }}/.config/home-manager/home.nix"
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: "0644"
  become: false

- name: Deploy Home Manager flake (flake.nix)
  ansible.builtin.template:
    src: flake.nix.j2
    dest: "{{ setup_home_manager_user_home }}/.config/home-manager/flake.nix"
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: "0644"
  become: false

- name: Ensure per-user Nix profile directory exists
  ansible.builtin.file:
    path: "/nix/var/nix/profiles/per-user/{{ ansible_user }}"
    state: directory
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: "0755"
  become: true

- name: Ensure user-local state directory exists
  ansible.builtin.file:
    path: "{{ setup_home_manager_user_home }}/.local/state/nix/profiles"
    state: directory
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: "0755"
  become: false

- name: Ensure nix profile is sourced from user shell profile
  ansible.builtin.lineinfile:
    path: "{{ setup_home_manager_user_home }}/.profile"
    line: ". /nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh"
    create: true
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: "0644"
  become: false

- name: Ensure nix profile is sourced from bashrc (for interactive shells)
  ansible.builtin.lineinfile:
    path: "{{ setup_home_manager_user_home }}/.bashrc"
    line: >-
      if [ -f /nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh ];
      then . /nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh; fi
    create: true
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: "0644"
  become: false

- name: Check whether home-manager command is available
  ansible.builtin.stat:
    path: "/nix/var/nix/profiles/per-user/{{ ansible_user }}/profile/bin/home-manager"
  register: setup_home_manager_home_manager_present
  become: false

- name: Install Home Manager into user's Nix profile (idempotent)
  ansible.builtin.shell: |
    set -euo pipefail
    # Verify nix-daemon profile exists
    if [ ! -f /nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh ]; then
      echo "ERROR: Nix daemon profile not found. Nix installation may be incomplete."
      exit 1
    fi
    # Source nix daemon profile
    . /nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh
    nix --extra-experimental-features 'nix-command flakes' profile install \
      --profile /nix/var/nix/profiles/per-user/{{ ansible_user }}/profile \
      "nixpkgs#home-manager"
  when: not setup_home_manager_home_manager_present.stat.exists
  environment:
    USER: "{{ ansible_user }}"
    HOME: "{{ setup_home_manager_user_home }}"
  args:
    executable: /bin/bash
    creates: "/nix/var/nix/profiles/per-user/{{ ansible_user }}/profile/bin/home-manager"
  become: true
  register: setup_home_manager_install_home_manager

- name: Ensure user home directory has correct ownership
  ansible.builtin.file:
    path: "{{ setup_home_manager_user_home }}"
    state: directory
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: "0755"
  become: true

- name: Ensure user cache directory exists with proper ownership
  ansible.builtin.file:
    path: "{{ setup_home_manager_user_home }}/.cache"
    state: directory
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: "0755"
  become: true

- name: Ensure user local directories exist with proper ownership
  ansible.builtin.file:
    path: "{{ setup_home_manager_user_home }}/{{ item }}"
    state: directory
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: "0755"
  become: true
  loop:
    - .local
    - .local/share
    - .local/state
    - .config

- name: Ensure Nix cache directory exists with proper ownership (recursive)
  ansible.builtin.file:
    path: "{{ setup_home_manager_user_home }}/.cache/nix"
    state: directory
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: "0755"
    recurse: true
  become: true

- name: Ensure oh-my-zsh cache directory exists with proper ownership
  ansible.builtin.file:
    path: "{{ setup_home_manager_user_home }}/.cache/oh-my-zsh"
    state: directory
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: "0755"
  become: true

- name: Clear any existing nix-env packages to prevent conflicts
  ansible.builtin.shell: |
    set -euo pipefail
    # Verify nix-daemon profile exists
    if [ ! -f /nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh ]; then
      echo "ERROR: Nix daemon profile not found. Nix installation may be incomplete."
      exit 1
    fi
    # Source nix daemon profile
    . /nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh

    echo "=== Checking for existing nix-env packages that could conflict ==="

    # Ensure we're working with the correct user profile paths
    USER_PROFILE="/nix/var/nix/profiles/per-user/{{ ansible_user }}/profile"

    # Check if the per-user profile directory exists, create if needed
    if [ ! -d "/nix/var/nix/profiles/per-user/{{ ansible_user }}" ]; then
      echo "Creating per-user profile directory..."
      mkdir -p "/nix/var/nix/profiles/per-user/{{ ansible_user }}" || echo "Warning: Could not create per-user profile directory"
    fi

    # Check default user profile (using explicit profile path to avoid permission issues)
    echo "Checking default user profile..."
    if nix-env --profile "$USER_PROFILE" -q 2>/dev/null | grep -q .; then
      echo "Found existing nix-env packages in user profile, removing them to prevent conflicts:"
      nix-env --profile "$USER_PROFILE" -q
      nix-env --profile "$USER_PROFILE" -e '*' || echo "Warning: Could not remove some packages from user profile, continuing anyway"
    else
      echo "No existing nix-env packages found in user profile"
    fi

    # Also check if there's a default profile that might conflict
    DEFAULT_PROFILE="$HOME/.nix-profile"
    if [ -L "$DEFAULT_PROFILE" ] && nix-env -q 2>/dev/null | grep -q .; then
      echo "Found packages in default profile symlink, removing them..."
      nix-env -e '*' || echo "Warning: Could not remove packages from default profile, continuing anyway"
    fi

    echo "=== Package conflict cleanup completed ==="
  environment:
    USER: "{{ ansible_user }}"
    HOME: "{{ setup_home_manager_user_home }}"
    NIX_USER_PROFILE_DIR: "/nix/var/nix/profiles/per-user/{{ ansible_user }}"
  args:
    executable: /bin/bash
  become: true
  become_user: "{{ ansible_user }}"
  changed_when: false
- name: Copy home-manager activation script into place
  ansible.builtin.template:
    src: home-manager-activate.sh.j2
    dest: "{{ setup_home_manager_user_home }}/.config/home-manager/home-manager-activate.sh"
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: "0755"
  become: true
  become_user: "{{ ansible_user }}"

- name: Run home-manager activation script
  ansible.builtin.command:
    cmd: "{{ setup_home_manager_user_home }}/.config/home-manager/home-manager-activate.sh"
    chdir: "{{ setup_home_manager_user_home }}/.config/home-manager"
  environment:
    USER: "{{ ansible_user }}"
    HOME: "{{ setup_home_manager_user_home }}"
    XDG_CACHE_HOME: "{{ setup_home_manager_user_home }}/.cache"
    XDG_CONFIG_HOME: "{{ setup_home_manager_user_home }}/.config"
    XDG_DATA_HOME: "{{ setup_home_manager_user_home }}/.local/share"
    XDG_STATE_HOME: "{{ setup_home_manager_user_home }}/.local/state"
    NIX_USER_PROFILE_DIR: "/nix/var/nix/profiles/per-user/{{ ansible_user }}"
  register: setup_home_manager_home_manager_switch
  become: true
  become_user: "{{ ansible_user }}"
  changed_when: false
