---
- name: Ensure bitwarden credentials are set
  ansible.builtin.fail:
    msg: "setup_keys_bitwarden_server is required, and either (setup_keys_bitwarden_email and setup_keys_bitwarden_password) or (setup_keys_bitwarden_client_id and setup_keys_bitwarden_client_secret) are required"
  when: >
    not setup_keys_bitwarden_server or
    (
      (not setup_keys_bitwarden_email or not setup_keys_bitwarden_password) and
      (not setup_keys_bitwarden_client_id or not setup_keys_bitwarden_client_secret)
    )

- name: Login and unlock Bitwarden
  block:
    - name: Get bw server
      delegate_to: localhost
      ansible.builtin.command: bw config server
      changed_when: false
      register: bw_server

    - name: Set bw server
      when: bw_server.stdout != setup_keys_bitwarden_server
      delegate_to: localhost
      ansible.builtin.command: bw config server "{{ setup_keys_bitwarden_server }}"

    - name: Get bw status
      delegate_to: localhost
      ansible.builtin.command: bw status
      changed_when: false
      register: bw_status

    - name: Login to Bitwarden with API key
      when:
        - bw_status.stdout | from_json | community.general.json_query('status') == "unauthenticated"
        - setup_keys_bitwarden_client_id and setup_keys_bitwarden_client_secret
      delegate_to: localhost
      ansible.builtin.command: bw login --apikey
      environment:
        BW_CLIENTID: "{{ setup_keys_bitwarden_client_id }}"
        BW_CLIENTSECRET: "{{ setup_keys_bitwarden_client_secret }}"
      any_errors_fatal: true

    - name: Login to Bitwarden with email/password
      when:
        - bw_status.stdout | from_json | community.general.json_query('status') == "unauthenticated"
        - setup_keys_bitwarden_email and setup_keys_bitwarden_password
        - not (setup_keys_bitwarden_client_id and setup_keys_bitwarden_client_secret)
      delegate_to: localhost
      ansible.builtin.command: bw login "{{ setup_keys_bitwarden_email }}" "{{ setup_keys_bitwarden_password }}" --raw
      any_errors_fatal: true

    - name: Unlock Bitwarden with password
      when:
        - bw_status.stdout | from_json | community.general.json_query('status') != "unlocked"
        - setup_keys_bitwarden_password
        - not (setup_keys_bitwarden_client_id and setup_keys_bitwarden_client_secret)
      delegate_to: localhost
      ansible.builtin.command: bw unlock --raw "{{ setup_keys_bitwarden_password }}"
      register: bw_session_password
      no_log: true

    - name: Check if unlock is needed for API key auth
      when:
        - setup_keys_bitwarden_client_id and setup_keys_bitwarden_client_secret
      delegate_to: localhost
      ansible.builtin.command: bw status
      register: bw_status_after_login
      changed_when: false

    - name: Set session token for password auth
      ansible.builtin.set_fact:
        bw_session: "{{ bw_session_password.stdout }}"
      no_log: true
      when: bw_session_password is defined and bw_session_password.stdout is defined

    - name: Set empty session for API key auth (if already unlocked)
      ansible.builtin.set_fact:
        bw_session: ""
      when:
        - setup_keys_bitwarden_client_id and setup_keys_bitwarden_client_secret
        - bw_status_after_login is defined
        - bw_status_after_login.stdout | from_json | community.general.json_query('status') == "unlocked"

    - name: Ensure bw is unlocked
      delegate_to: localhost
      ansible.builtin.command: bw status
      register: bw_status
      changed_when: false
      failed_when: bw_status.stdout | from_json | community.general.json_query('status') != "unlocked"
      environment:
        BW_SESSION: "{{ bw_session | default('') }}"

  rescue:
    - name: Logout from Bitwarden
      delegate_to: localhost
      ansible.builtin.command: bw logout
    - ansible.builtin.fail:
        msg: "{{ ansible_failed_result }}"
