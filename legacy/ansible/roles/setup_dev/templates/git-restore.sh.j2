#!/bin/bash

# Define your projects directory
BACKUP_DIR="$1"
if [ -z "$BACKUP_DIR" ]; then
	echo "Usage: $0 <backup-directory>"
	exit 1
fi

PROJECTS_DIR="{{ setup_dev_projects_directory }}"

# Function to extract the remote URL from the .git/config.bak file
get_remote_url() {
	local git_config_file="$1"
	grep -E 'url = ' "$git_config_file" | sed -e 's/^[[:space:]]*url = //'
}

# Function to get the saved branch name
get_branch_name() {
	local branch_file="$1"
	cat "$branch_file"
}

check_git_repo() {
	local dir=$1

	if [ ! -d "$dir/.git" ]; then
		return 1
	fi

	# Check if the directory is a Git repository
	cd "$dir" || return 1
	if git rev-parse --git-dir >/dev/null 2>&1; then
		return 0
	fi

	return 1
}

# Copy file from backup
rsync -a "$BACKUP_DIR/" "$PROJECTS_DIR"

# Find all project directories containing .git/config.bak and reinitialize git
find "$PROJECTS_DIR" -type f -name 'config.bak' -path '*/.git/config.bak' | while read -r config_bak; do
	project_dir=$(dirname "$(dirname "$config_bak")")

	echo "Restoring $project_dir"

	cd "$project_dir" || continue

	# Fetch the branch name
	if [ -f "$project_dir/.git/branch.bak" ]; then
		BRANCH_NAME=$(get_branch_name "$project_dir/.git/branch.bak")
	else
		echo "No branch name found in $project_dir/.git/branch.bak"
		continue
	fi

	# Check if a git repository has already been initialized
	if ! check_git_repo "$project_dir"; then
		git init -b "$BRANCH_NAME"
		# Extract the remote URL from the backed-up git config file
		REMOTE_URL=$(get_remote_url "$config_bak")
		if [ -n "$REMOTE_URL" ]; then
			git remote add origin "$REMOTE_URL"
		else
			echo "No remote URL found in $config_bak"
			continue
		fi
	else
		REMOTE_URL=$(git remote get-url origin 2>/dev/null)
	fi

	if [ -n "$REMOTE_URL" ] && [ -n "$BRANCH_NAME" ]; then
		git fetch origin
		git reset --hard "origin/$BRANCH_NAME"
	else
		echo "Failed to determine remote URL or branch name for $project_dir"
	fi
done
